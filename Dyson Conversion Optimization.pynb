{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0dabb50e-bd2d-42a0-8602-ab21a06ab1b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# PART 1 Cleaning & Opportunity Identification\n",
    "# 1.1 Import Necessary Libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Enable inline plotting for Jupyter Notebooks\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "e1c53def-d961-4ad8-ae06-1063bd54fcd7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Traffic Source</th>\n",
       "      <th>Device Type</th>\n",
       "      <th>User Type</th>\n",
       "      <th>Session ID</th>\n",
       "      <th>Session Duration (seconds)</th>\n",
       "      <th>Pages per Session</th>\n",
       "      <th>Added to Cart</th>\n",
       "      <th>Cart Abandonment</th>\n",
       "      <th>Checkout Stage 1 - Details</th>\n",
       "      <th>Checkout Stage 2 - Delivery</th>\n",
       "      <th>Checkout Stage 3 - Payment</th>\n",
       "      <th>Converted</th>\n",
       "      <th>Order Value</th>\n",
       "      <th>Product Category</th>\n",
       "      <th>Landing Page</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4/7/2024</td>\n",
       "      <td>Social</td>\n",
       "      <td>Mobile</td>\n",
       "      <td>New</td>\n",
       "      <td>1001</td>\n",
       "      <td>310</td>\n",
       "      <td>5.7</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>£-</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Deals</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>27/07/2024</td>\n",
       "      <td>Social</td>\n",
       "      <td>Mobile</td>\n",
       "      <td>Returning</td>\n",
       "      <td>1002</td>\n",
       "      <td>329</td>\n",
       "      <td>7.3</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>£-</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Support</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11/8/2024</td>\n",
       "      <td>Direct</td>\n",
       "      <td>Desktop</td>\n",
       "      <td>Returning</td>\n",
       "      <td>1003</td>\n",
       "      <td>378</td>\n",
       "      <td>4.4</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>£-</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Deals</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>25/08/2024</td>\n",
       "      <td>Email</td>\n",
       "      <td>Tablet</td>\n",
       "      <td>New</td>\n",
       "      <td>1004</td>\n",
       "      <td>179</td>\n",
       "      <td>4.5</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>£-</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Category Page</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>18/07/2024</td>\n",
       "      <td>Email</td>\n",
       "      <td>Desktop</td>\n",
       "      <td>New</td>\n",
       "      <td>1006</td>\n",
       "      <td>271</td>\n",
       "      <td>5.3</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>£-</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Homepage</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date Traffic Source Device Type  User Type  Session ID  \\\n",
       "0    4/7/2024         Social      Mobile        New        1001   \n",
       "1  27/07/2024         Social      Mobile  Returning        1002   \n",
       "2   11/8/2024         Direct     Desktop  Returning        1003   \n",
       "3  25/08/2024          Email      Tablet        New        1004   \n",
       "4  18/07/2024          Email     Desktop        New        1006   \n",
       "\n",
       "   Session Duration (seconds)  Pages per Session  Added to Cart  \\\n",
       "0                         310                5.7           True   \n",
       "1                         329                7.3           True   \n",
       "2                         378                4.4           True   \n",
       "3                         179                4.5           True   \n",
       "4                         271                5.3           True   \n",
       "\n",
       "   Cart Abandonment  Checkout Stage 1 - Details  Checkout Stage 2 - Delivery  \\\n",
       "0              True                        True                         True   \n",
       "1              True                        True                        False   \n",
       "2              True                        True                         True   \n",
       "3             False                        True                         True   \n",
       "4             False                        True                         True   \n",
       "\n",
       "   Checkout Stage 3 - Payment  Converted  Order Value  Product Category  \\\n",
       "0                        True       True         £-                 NaN   \n",
       "1                       False      False         £-                 NaN   \n",
       "2                        True       True         £-                 NaN   \n",
       "3                       False      False         £-                 NaN   \n",
       "4                       False      False         £-                 NaN   \n",
       "\n",
       "    Landing Page  \n",
       "0          Deals  \n",
       "1        Support  \n",
       "2          Deals  \n",
       "3  Category Page  \n",
       "4       Homepage  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 1.2: Load the Dataset\n",
    "data = pd.read_csv(\"/Users/john/Desktop/Dyson/Cro_Case_Dataset.csv\", encoding='ISO-8859-1')\n",
    "\n",
    "# Display the first few rows to verify the data is loaded correctly\n",
    "data.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "2fcbad3f-b13f-4b95-a7dc-3b2c8990b9cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Column Names After Stripping Whitespace:\n",
      "['Date', 'Traffic Source', 'Device Type', 'User Type', 'Session ID', 'Session Duration (seconds)', 'Pages per Session', 'Added to Cart', 'Cart Abandonment', 'Checkout Stage 1 - Details', 'Checkout Stage 2 - Delivery', 'Checkout Stage 3 - Payment', 'Converted', 'Order Value', 'Product Category', 'Landing Page']\n",
      "\n",
      "Data types of boolean columns before cleaning:\n",
      "Added to Cart                  bool\n",
      "Cart Abandonment               bool\n",
      "Checkout Stage 1 - Details     bool\n",
      "Checkout Stage 2 - Delivery    bool\n",
      "Checkout Stage 3 - Payment     bool\n",
      "Converted                      bool\n",
      "dtype: object\n",
      "\n",
      "Data Types After Cleaning:\n",
      "Date                            object\n",
      "Traffic Source                  object\n",
      "Device Type                     object\n",
      "User Type                       object\n",
      "Session ID                       int64\n",
      "Session Duration (seconds)       int64\n",
      "Pages per Session              float64\n",
      "Added to Cart                     bool\n",
      "Cart Abandonment                  bool\n",
      "Checkout Stage 1 - Details        bool\n",
      "Checkout Stage 2 - Delivery       bool\n",
      "Checkout Stage 3 - Payment        bool\n",
      "Converted                         bool\n",
      "Order Value                    float64\n",
      "Product Category                object\n",
      "Landing Page                    object\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# 1.3 Data Cleaning and Preprocessing\n",
    "\n",
    "# Strip leading and trailing whitespace from column names\n",
    "data.columns = data.columns.str.strip()\n",
    "\n",
    "# Verify that the column names are now clean\n",
    "print(\"Column Names After Stripping Whitespace:\")\n",
    "print(data.columns.tolist())\n",
    "\n",
    "# List of boolean columns to verify data types\n",
    "bool_columns = ['Added to Cart', 'Cart Abandonment', 'Checkout Stage 1 - Details',\n",
    "                'Checkout Stage 2 - Delivery', 'Checkout Stage 3 - Payment', 'Converted']\n",
    "\n",
    "# Verify data types of boolean columns\n",
    "print(\"\\nData types of boolean columns before cleaning:\")\n",
    "print(data[bool_columns].dtypes)\n",
    "\n",
    "# Check if boolean columns are of type 'object' and convert them if necessary\n",
    "for col in bool_columns:\n",
    "    if data[col].dtype == 'object':\n",
    "        # Map string representations to actual booleans\n",
    "        data[col] = data[col].map({'True': True, 'False': False, 'TRUE': True, 'FALSE': False})\n",
    "        # Fill any missing values with False\n",
    "        data[col] = data[col].fillna(False)\n",
    "    else:\n",
    "        # Ensure the column is of type 'bool'\n",
    "        data[col] = data[col].astype('bool')\n",
    "\n",
    "# Clean 'Order Value' column by removing currency symbols and converting to float\n",
    "def clean_order_value(value):\n",
    "    if isinstance(value, str):\n",
    "        value = value.replace('£', '').replace(',', '').strip()\n",
    "        if value in ['-', '']:\n",
    "            return np.nan  # Treat '-' or empty strings as missing\n",
    "        else:\n",
    "            try:\n",
    "                return float(value)\n",
    "            except ValueError:\n",
    "                return np.nan\n",
    "    else:\n",
    "        return value\n",
    "\n",
    "data['Order Value'] = data['Order Value'].apply(clean_order_value)\n",
    "\n",
    "# Fill missing 'Order Value' with 0 (if appropriate for your analysis)\n",
    "data['Order Value'] = data['Order Value'].fillna(0)\n",
    "\n",
    "# Verify data types after cleaning\n",
    "print(\"\\nData Types After Cleaning:\")\n",
    "print(data.dtypes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "ce3975f0-5436-4028-b7e1-2fc7fb1cc670",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Min Date: 1/7/2024\n",
      "Max Date: 9/8/2024\n"
     ]
    }
   ],
   "source": [
    "#date range\n",
    "min_date = data['Date'].min()\n",
    "max_date = data['Date'].max()\n",
    "\n",
    "print(\"Min Date:\", min_date)\n",
    "print(\"Max Date:\", max_date)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "1b5c9e03-9efd-4d5c-81c3-519c6a423ad3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                Stage Rate (%) Drop-off Rate (%) Potential Revenue Loss (£)\n",
      "0         Add to Cart   63.51%            36.49%                  £1,695.27\n",
      "1  Initiated Checkout   91.14%             8.86%                    £286.74\n",
      "2   Checkout to Order   47.57%            52.43%                  £3,251.78\n",
      "3          Conversion   26.13%             5.11%                    £576.73\n"
     ]
    }
   ],
   "source": [
    "# 1.4 Conversion Rates, Drop-offs, and Revenue Loss\n",
    "\n",
    "# Calculate Average Order Value (AOV) from converted sessions\n",
    "converted_orders = data[data['Converted'] == True]\n",
    "if not converted_orders.empty:\n",
    "    AOV = converted_orders['Order Value'].mean()\n",
    "else:\n",
    "    AOV = 0  # If there are no converted orders, set AOV to 0\n",
    "\n",
    "# Total number of unique sessions\n",
    "total_sessions = data['Session ID'].nunique()\n",
    "\n",
    "# Number of sessions at each stage\n",
    "add_to_cart_sessions = data[data['Added to Cart'] == True]['Session ID'].nunique()\n",
    "initiated_checkout_sessions = data[data['Checkout Stage 1 - Details'] == True]['Session ID'].nunique()\n",
    "checkout_to_order_sessions = data[data['Checkout Stage 3 - Payment'] == True]['Session ID'].nunique()\n",
    "converted_sessions = data[data['Converted'] == True]['Session ID'].nunique()\n",
    "\n",
    "# Calculate rates at each stage\n",
    "add_to_cart_rate = (add_to_cart_sessions / total_sessions) * 100 if total_sessions else 0\n",
    "initiated_checkout_rate = (initiated_checkout_sessions / add_to_cart_sessions) * 100 if add_to_cart_sessions else 0\n",
    "checkout_to_order_rate = (checkout_to_order_sessions / initiated_checkout_sessions) * 100 if initiated_checkout_sessions else 0\n",
    "conversion_rate = (converted_sessions / total_sessions) * 100 if total_sessions else 0  # Overall conversion rate\n",
    "\n",
    "# Calculate drop-off numbers at each stage\n",
    "drop_off_add_to_cart = total_sessions - add_to_cart_sessions\n",
    "drop_off_initiated_checkout = add_to_cart_sessions - initiated_checkout_sessions\n",
    "drop_off_checkout_to_order = initiated_checkout_sessions - checkout_to_order_sessions\n",
    "drop_off_conversion = checkout_to_order_sessions - converted_sessions\n",
    "\n",
    "# Calculate drop-off rates at each stage\n",
    "drop_off_rate_add_to_cart = (drop_off_add_to_cart / total_sessions) * 100 if total_sessions else 0\n",
    "drop_off_rate_initiated_checkout = (drop_off_initiated_checkout / add_to_cart_sessions) * 100 if add_to_cart_sessions else 0\n",
    "drop_off_rate_checkout_to_order = (drop_off_checkout_to_order / initiated_checkout_sessions) * 100 if initiated_checkout_sessions else 0\n",
    "drop_off_rate_conversion = (drop_off_conversion / checkout_to_order_sessions) * 100 if checkout_to_order_sessions else 0\n",
    "\n",
    "# Calculate potential revenue loss at each stage\n",
    "# For users who dropped off at 'Add to Cart' stage\n",
    "cumulative_conversion_rate_from_add_to_cart = (\n",
    "    (initiated_checkout_rate / 100) *\n",
    "    (checkout_to_order_rate / 100) *\n",
    "    (conversion_rate / 100)\n",
    ")\n",
    "potential_conversions_add_to_cart = drop_off_add_to_cart * cumulative_conversion_rate_from_add_to_cart\n",
    "potential_loss_add_to_cart = potential_conversions_add_to_cart * AOV\n",
    "\n",
    "# For users who dropped off at 'Initiated Checkout' stage\n",
    "cumulative_conversion_rate_from_initiated_checkout = (\n",
    "    (checkout_to_order_rate / 100) *\n",
    "    (conversion_rate / 100)\n",
    ")\n",
    "potential_conversions_initiated_checkout = drop_off_initiated_checkout * cumulative_conversion_rate_from_initiated_checkout\n",
    "potential_loss_initiated_checkout = potential_conversions_initiated_checkout * AOV\n",
    "\n",
    "# For users who dropped off at 'Checkout to Order' stage\n",
    "cumulative_conversion_rate_from_checkout_to_order = (conversion_rate / 100)\n",
    "potential_conversions_checkout_to_order = drop_off_checkout_to_order * cumulative_conversion_rate_from_checkout_to_order\n",
    "potential_loss_checkout_to_order = potential_conversions_checkout_to_order * AOV\n",
    "\n",
    "# For users who dropped off at 'Conversion' stage\n",
    "potential_conversions_conversion = drop_off_conversion  # They are at the last step before conversion\n",
    "potential_loss_conversion = potential_conversions_conversion * AOV\n",
    "\n",
    "# Create a DataFrame to display the results as a table\n",
    "import pandas as pd\n",
    "\n",
    "# Define the stages and corresponding metrics\n",
    "stages = ['Add to Cart', 'Initiated Checkout', 'Checkout to Order', 'Conversion']\n",
    "rates = [add_to_cart_rate, initiated_checkout_rate, checkout_to_order_rate, conversion_rate]\n",
    "drop_off_rates = [drop_off_rate_add_to_cart, drop_off_rate_initiated_checkout, drop_off_rate_checkout_to_order, drop_off_rate_conversion]\n",
    "revenue_losses = [potential_loss_add_to_cart, potential_loss_initiated_checkout, potential_loss_checkout_to_order, potential_loss_conversion]\n",
    "\n",
    "# Create the DataFrame\n",
    "results_df = pd.DataFrame({\n",
    "    'Stage': stages,\n",
    "    'Rate (%)': rates,\n",
    "    'Drop-off Rate (%)': drop_off_rates,\n",
    "    'Potential Revenue Loss (£)': revenue_losses\n",
    "})\n",
    "\n",
    "# Format the numerical values\n",
    "results_df['Rate (%)'] = results_df['Rate (%)'].map('{:.2f}%'.format)\n",
    "results_df['Drop-off Rate (%)'] = results_df['Drop-off Rate (%)'].map('{:.2f}%'.format)\n",
    "results_df['Potential Revenue Loss (£)'] = results_df['Potential Revenue Loss (£)'].map('£{:,.2f}'.format)\n",
    "\n",
    "# Display the table\n",
    "print(results_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "d94a79ef-1d8f-49a8-a8f0-ef2286486730",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 1.5 Funnel Visualization With Revenue Loss\n",
    "\n",
    "# Create a DataFrame for the funnel stages with conversion rates and potential revenue loss\n",
    "funnel_data = pd.DataFrame({\n",
    "    'Stage': ['Total Sessions', 'Added to Cart', 'Initiated Checkout', 'Checkout to Order', 'Converted'],\n",
    "    'Users': [\n",
    "        total_sessions,\n",
    "        add_to_cart_sessions,\n",
    "        initiated_checkout_sessions,\n",
    "        checkout_to_order_sessions,\n",
    "        converted_sessions\n",
    "    ],\n",
    "    'Conversion Rate (%)': [\n",
    "        100,\n",
    "        (add_to_cart_sessions / total_sessions) * 100 if total_sessions else 0,\n",
    "        (initiated_checkout_sessions / total_sessions) * 100 if total_sessions else 0,\n",
    "        (checkout_to_order_sessions / total_sessions) * 100 if total_sessions else 0,\n",
    "        (converted_sessions / total_sessions) * 100 if total_sessions else 0\n",
    "    ],\n",
    "    'Potential Revenue Loss (£)': [\n",
    "        0,  # No revenue loss at the start\n",
    "        potential_loss_add_to_cart,\n",
    "        potential_loss_initiated_checkout,\n",
    "        potential_loss_checkout_to_order,\n",
    "        0   # No revenue loss for converted sessions\n",
    "    ]\n",
    "})\n",
    "\n",
    "# Plot the funnel using a bar chart\n",
    "plt.figure(figsize=(12, 7))\n",
    "ax = sns.barplot(x='Stage', y='Users', data=funnel_data, palette='Greys')\n",
    "\n",
    "# Annotate each bar with the revenue loss value\n",
    "for index, row in funnel_data.iterrows():\n",
    "    x = index\n",
    "    y = row['Users']\n",
    "    revenue_loss = row['Potential Revenue Loss (£)']\n",
    "    # Format the revenue loss value\n",
    "    if revenue_loss > 0:\n",
    "        label = f\"£{revenue_loss:,.0f}\"\n",
    "        # Place the text on top of the bar\n",
    "        ax.text(x, y + (max(funnel_data['Users']) * 0.02), label, ha='center', va='bottom', fontsize=10, color='red')\n",
    "    else:\n",
    "        # No label for stages with zero revenue loss\n",
    "        label = \"\"\n",
    "\n",
    "# Customize the plot to fit Dyson branding\n",
    "plt.title('Conversion Funnel Shows Biggest Opportunity At Checkout Stage', fontsize=16, fontweight='bold', color='#000000')\n",
    "plt.ylabel('Number of Users', fontsize=12, color='#000000')\n",
    "plt.xlabel('Funnel Stage', fontsize=12, color='#000000')\n",
    "plt.xticks(fontsize=10, color='#000000')\n",
    "plt.yticks(fontsize=10, color='#000000')\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.gca().set_facecolor('#FFFFFF')\n",
    "plt.gcf().set_facecolor('#FFFFFF')\n",
    "sns.despine()\n",
    "\n",
    "#save for prez\n",
    "plt.tight_layout()\n",
    "plt.savefig('Conversion Funnel Shows Biggest Opportunity At Checkout Stage.png', format='png', dpi=300)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "3782923b-f19b-445f-adbd-5326b0b31bb2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# PART 2 Opportunity Deep Dive\n",
    "# 2.1 Checkout Stage Drop-off Analysis\n",
    "\n",
    "# Number of sessions that reached each checkout stage\n",
    "stage1_sessions = data[data['Checkout Stage 1 - Details'] == True]['Session ID'].nunique()\n",
    "stage2_sessions = data[data['Checkout Stage 2 - Delivery'] == True]['Session ID'].nunique()\n",
    "stage3_sessions = data[data['Checkout Stage 3 - Payment'] == True]['Session ID'].nunique()\n",
    "\n",
    "# Create a DataFrame for the checkout stages with simplified stage names\n",
    "checkout_stages = pd.DataFrame({\n",
    "    'Stage': ['Details', 'Delivery', 'Payment', 'Converted'],\n",
    "    'Users': [stage1_sessions, stage2_sessions, stage3_sessions, converted_sessions]\n",
    "})\n",
    "\n",
    "# Calculate drop-off percentages between stages\n",
    "checkout_stages['Drop-off (%)'] = checkout_stages['Users'].pct_change(-1) * 100\n",
    "checkout_stages['Drop-off (%)'] = checkout_stages['Drop-off (%)'].fillna(0).abs()\n",
    "\n",
    "# Visualize the checkout funnel drop-off\n",
    "plt.figure(figsize=(10,6))\n",
    "sns.barplot(x='Stage', y='Users', data=checkout_stages, palette='Greys')\n",
    "\n",
    "# Customize the plot to match Dyson branding\n",
    "plt.title('Checkout Funnel Drop-off Is Biggest At Delivery Stage', fontsize=16, fontweight='bold', color='#000000')\n",
    "plt.ylabel('Number of Users', fontsize=12, color='#000000')\n",
    "plt.xlabel('Checkout Stage', fontsize=12, color='#000000')\n",
    "plt.xticks(fontsize=10, color='#000000')\n",
    "plt.yticks(fontsize=10, color='#000000')\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "sns.despine()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('Biggest Drop-Off At Delivery Stage.png', format='png', dpi=300)\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "83e8bfd6-1f71-4bed-aa40-edd4b339641f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Stage  Drop-off (%)\n",
      "0    Details     23.734177\n",
      "1   Delivery     69.892473\n",
      "2    Payment      5.382436\n",
      "3  Converted      0.000000\n"
     ]
    }
   ],
   "source": [
    "# Print stages and their drop-off percentages\n",
    "print(checkout_stages[['Stage', 'Drop-off (%)']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "e09fffcc-f4d3-4a0a-b499-ea1de32fe71f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Traffic Source  Drop-off Rate at Delivery (%)\n",
      "0         Direct                      34.259259\n",
      "1          Email                      49.275362\n",
      "2        Organic                      44.520548\n",
      "3    Paid Search                      37.391304\n",
      "4         Social                      40.800000\n"
     ]
    }
   ],
   "source": [
    "# 2.2 Traffic Source Segmentation\n",
    "#Hypothesis: custoemrs from different traffic sources have different expectations\n",
    "\n",
    "# Filter sessions that reached 'Delivery' stage\n",
    "delivery_stage_sessions = data[data['Checkout Stage 2 - Delivery'] == True]\n",
    "\n",
    "# Group by traffic source\n",
    "grouped_data = delivery_stage_sessions.groupby('Traffic Source')\n",
    "\n",
    "# Calculate the number of users who dropped off and who proceeded\n",
    "drop_offs = grouped_data.apply(lambda x: x[x['Checkout Stage 3 - Payment'] == False]['Session ID'].nunique())\n",
    "proceeds = grouped_data.apply(lambda x: x[x['Checkout Stage 3 - Payment'] == True]['Session ID'].nunique())\n",
    "\n",
    "# Calculate drop-off rates\n",
    "drop_off_rates = (drop_offs / (drop_offs + proceeds)) * 100\n",
    "drop_off_rates = drop_off_rates.reset_index()\n",
    "drop_off_rates.columns = ['Traffic Source', 'Drop-off Rate at Delivery (%)']\n",
    "\n",
    "print(drop_off_rates)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "ac4d6033-de61-4a7b-bd7b-a084372f2716",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Device Type  Drop-off Rate at Delivery (%)\n",
      "0     Desktop                      39.910314\n",
      "1      Mobile                      45.641026\n",
      "2      Tablet                      40.186916\n"
     ]
    }
   ],
   "source": [
    "#2.3 Device Segmentation\n",
    "\n",
    "# Filter sessions that reached 'Delivery' stage\n",
    "delivery_stage_sessions = data[data['Checkout Stage 2 - Delivery'] == True]\n",
    "\n",
    "# Group by device type\n",
    "grouped_data = delivery_stage_sessions.groupby('Device Type')\n",
    "\n",
    "# Calculate the number of users who dropped off and who proceeded\n",
    "drop_offs = grouped_data.apply(lambda x: x[x['Checkout Stage 3 - Payment'] == False]['Session ID'].nunique())\n",
    "proceeds = grouped_data.apply(lambda x: x[x['Checkout Stage 3 - Payment'] == True]['Session ID'].nunique())\n",
    "\n",
    "# Calculate drop-off rates\n",
    "drop_off_rates = (drop_offs / (drop_offs + proceeds)) * 100\n",
    "drop_off_rates = drop_off_rates.reset_index()\n",
    "drop_off_rates.columns = ['Device Type', 'Drop-off Rate at Delivery (%)']\n",
    "\n",
    "print(drop_off_rates)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "cdbc21af-6d3b-42de-a6c8-4426e2cb96f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Sessions Reaching 'Delivery' Page: 632\n",
      "Average Visits to 'Delivery' Page per Day: 10.54\n",
      "Average Visits to 'Delivery' Page per Week: 16.87\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#PART 3: A/B Test Framework\n",
    "# 3.1 Calculate sessions to delivery page for power analysis\n",
    "# Convert 'Date' column to datetime format\n",
    "data['Date'] = pd.to_datetime(data['Date'], errors='coerce')\n",
    "\n",
    "# Filter sessions that reached the 'Delivery' page\n",
    "delivery_page_data = data[data['Checkout Stage 2 - Delivery'] == True]\n",
    "\n",
    "# Total unique sessions reaching the 'Delivery' page\n",
    "delivery_page_sessions = delivery_page_data['Session ID'].nunique()\n",
    "\n",
    "# Visits to 'Delivery' page per day\n",
    "delivery_visits_per_day = delivery_page_data.groupby(delivery_page_data['Date'].dt.date)['Session ID'].nunique()\n",
    "average_delivery_visits_per_day = delivery_visits_per_day.mean()\n",
    "\n",
    "# Visits to 'Delivery' page per week\n",
    "delivery_visits_per_week = delivery_page_data.groupby(delivery_page_data['Date'].dt.isocalendar().week)['Session ID'].nunique()\n",
    "average_delivery_visits_per_week = delivery_visits_per_week.mean()\n",
    "\n",
    "print(f\"Total Sessions Reaching 'Delivery' Page: {delivery_page_sessions}\")\n",
    "print(f\"Average Visits to 'Delivery' Page per Day: {average_delivery_visits_per_day:.2f}\")\n",
    "print(f\"Average Visits to 'Delivery' Page per Week: {average_delivery_visits_per_week:.2f}\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "f9c8071f-5160-49f0-a82d-dde88d105317",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Visits to 'Delivery' Page per Day: 473846\n"
     ]
    }
   ],
   "source": [
    "# 3.1bUse real traffic data\n",
    "# according to similarweb tracking there are 1M monthly visits to dyson.co.uk\n",
    "# keeping the rates constant we estimate delivery visits\n",
    "average_delivery_visits_per_day = 616*1000000/1300\n",
    "print(f\"Average Visits to 'Delivery' Page per Day: {average_delivery_visits_per_day:.0f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "daeec052-d10e-4828-8cb6-0bea30d5daa2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Order Value (AOV): £297.64\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# 2.2 AOV\n",
    "#Filter converted orders with 'Order Value' greater than zero\n",
    "converted_orders = data[(data['Converted'] == True) & (data['Order Value'] > 0)]\n",
    "\n",
    "if not converted_orders.empty:\n",
    "    AOV = converted_orders['Order Value'].mean()\n",
    "else:\n",
    "    AOV = 0\n",
    "\n",
    "print(f\"Average Order Value (AOV): £{AOV:.2f}\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "5dda0f92-8aa1-4836-a180-1592f8b130ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Required Sample Size per Group: 18032\n",
      "Total Sample Size Needed: 36064\n"
     ]
    }
   ],
   "source": [
    "#3.3 Sample Size\n",
    "from statsmodels.stats.power import NormalIndPower\n",
    "\n",
    "# Baseline conversion rate (as a proportion)\n",
    "baseline_rate = 0.2613\n",
    "\n",
    "# Desired Minimum Detectable Effect (e.g., aiming for a 5% relative increase)\n",
    "relative_increase = 0.05  # 5% increase\n",
    "target_rate = baseline_rate * (1 + relative_increase)\n",
    "\n",
    "# Effect size calculation using Cohen's h formula\n",
    "effect_size = 2 * np.arcsin(np.sqrt(target_rate)) - 2 * np.arcsin(np.sqrt(baseline_rate))\n",
    "\n",
    "# Significance level (alpha) and power\n",
    "alpha = 0.05  # 95% confidence level\n",
    "power = 0.8   # 80% power\n",
    "\n",
    "# Sample size per group\n",
    "analysis = NormalIndPower()\n",
    "sample_size_per_group = analysis.solve_power(effect_size=effect_size, power=power, alpha=alpha, ratio=1)\n",
    "sample_size_per_group = int(np.ceil(sample_size_per_group))\n",
    "\n",
    "print(f\"Required Sample Size per Group: {sample_size_per_group}\")\n",
    "print(f\"Total Sample Size Needed: {sample_size_per_group * 2}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "025dc410-9517-425a-8f7f-354630ed21c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Estimated Duration Needed for Test: 1.0 days\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# 3.4 Estimated duration needed for test\n",
    "average_daily_delivery_visits = average_delivery_visits_per_day\n",
    "if average_daily_delivery_visits > 0:\n",
    "    days_needed = np.ceil((sample_size_per_group * 2) / average_daily_delivery_visits)\n",
    "else:\n",
    "    days_needed = 0\n",
    "print(f\"Estimated Duration Needed for Test: {days_needed} days\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "ea5f06bb-7618-4e0d-b3df-0ff148d930f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Estimated Additional Conversions: 13065\n",
      "Potential Revenue Increase: £3,888,652.08\n"
     ]
    }
   ],
   "source": [
    "# 3.5 Business Impact Estimation\n",
    "\n",
    "# Estimated additional conversions\n",
    "estimated_additional_conversions = 1000000 * baseline_rate * relative_increase\n",
    "\n",
    "# Potential revenue increase\n",
    "potential_revenue_increase = estimated_additional_conversions * AOV\n",
    "\n",
    "print(f\"Estimated Additional Conversions: {estimated_additional_conversions:.0f}\")\n",
    "print(f\"Potential Revenue Increase: £{potential_revenue_increase:,.2f}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
